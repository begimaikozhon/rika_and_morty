import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../data/models/character.dart';
import '../blocs/favorites_bloc.dart';

class CharacterCard extends StatelessWidget {
  final Character character;
  final bool isFavoriteScreen;

  const CharacterCard({required this.character, this.isFavoriteScreen = false});

  @override
  Widget build(BuildContext context) {
    return Card(
      child: ListTile(
        leading: Image.network(character.image),
        title: Text(character.name),
        subtitle: Text(character.status),
        trailing: isFavoriteScreen
            ? _buildDeleteIcon(context) // –ö–æ—Ä–∑–∏–Ω–∞ üóëÔ∏è
            : _buildFavoriteIcon(context), // –ó–≤–µ–∑–¥–æ—á–∫–∞ ‚≠ê
      ),
    );
  }

  /// **üóëÔ∏è –ò–∫–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–∫–æ—Ä–∑–∏–Ω–∞)**
  Widget _buildDeleteIcon(BuildContext context) {
    return IconButton(
      icon: Icon(Icons.delete, color: Colors.red),
      onPressed: () => _showDeleteDialog(context),
    );
  }

  /// **‚≠ê –ò–∫–æ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ**
  Widget _buildFavoriteIcon(BuildContext context) {
    return BlocBuilder<FavoritesBloc, FavoritesState>(
      builder: (context, state) {
        bool isFavorite = state is FavoritesLoaded &&
            state.favorites.any((fav) => fav.id == character.id);

        return IconButton(
          icon: Icon(
            isFavorite ? Icons.star : Icons.star_border,
            color: isFavorite ? Colors.yellow : null,
          ),
          onPressed: () {
            context
                .read<FavoritesBloc>()
                .add(ToggleFavorite(_cloneCharacter(character)));
          },
        );
      },
    );
  }

  /// **–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**
  void _showDeleteDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext dialogContext) {
        return AlertDialog(
          title: Text("–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?"),
          content: Text(
              "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${character.name} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?"),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(dialogContext),
              child: Text("–û—Ç–º–µ–Ω–∞"),
            ),
            TextButton(
              onPressed: () {
                context
                    .read<FavoritesBloc>()
                    .add(ToggleFavorite(_cloneCharacter(character)));
                Navigator.pop(dialogContext);
              },
              child: Text("–î–∞", style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }

  /// **‚ö°Ô∏è –§–∏–∫—Å –æ—à–∏–±–∫–∏ Hive: —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º**
  Character _cloneCharacter(Character character) {
    return Character(
      id: character.id,
      name: character.name,
      status: character.status,
      species: character.species,
      image: character.image,
    );
  }
}
